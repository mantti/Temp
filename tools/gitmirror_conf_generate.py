#!/usr/bin/env python

# Parse requirements.yaml and generate a git-mirror config file and a
# requirements.yml that uses the mirror instead of pulling directly.

import yaml
import urlparse
import sys
import time

def getreq(fname):
    with open(fname) as f:
        m = yaml.safe_load(f)
        return m

def genreq(req_in, mirror_ip, fname):
    with open(fname, 'w') as f:
        f.write('---\n# Generated by %s on %s\n' % (sys.argv[0], time.ctime()))
        for repo in req_in:
            up = urlparse.urlsplit(repo['src'])
            np = up.netloc + up.path
            un = ('http', mirror_ip + ':8080', np, '', '')
            nurl = urlparse.urlunsplit(un)
            f.write('\n- src: ' + nurl + '\n')
            for k in repo:
                if k == 'src':
                    continue
                f.write('  ' + k + ': ' + repo[k] + '\n')

def genmirror_conf(req_in, fname, basepath):
    with open(fname, 'w') as f:
        f.write('# git-mirror config generated by %s on %s\n' % (sys.argv[0], time.ctime()))
        f.write('BasePath = "%s"\n' % basepath)
        # Hackety-hack, lets mirror the fgci-ansible repo as well
        f.write('\n[[Repo]]\nOrigin = "https://github.com/fgci-org/fgci-ansible.git"\n')
        for repo in req_in:
            f.write('\n[[Repo]]\nOrigin = "%s"\n' % repo['src'])

if __name__ == '__main__':
    import sys
    if len(sys.argv) != 6:
        print "Usage: %s requirements.yml mirror_ip requirements_out.yml gitmirror.toml basepath" % sys.argv[0]
        sys.exit(1)
    m = getreq(sys.argv[1])
    genreq(m, sys.argv[2], sys.argv[3])
    genmirror_conf(m, sys.argv[4], sys.argv[5])
