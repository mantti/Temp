---
# tasks file for ansible-role-fgci-install
#
- name: install EPEL
  yum: name=epel-release state=present

- name: create dhcp.d directory
  file: path=/etc/dhcp/dhcpd.d state=directory

- name: create group_vars_dest directory - /var/www/html/group_vars by default
  file: path={{ group_vars_dest }} state=directory

- name: template in /var/www/html/pull_variables.yml
  template: src=pull_variables.yml.j2 dest=/var/www/html/pull_variables.yml mode=0644 backup=yes

- name: copy hosts file to /var/www/html/hosts.yml - for ansible-pull
  copy: src={{ hosts_file_src }} dest={{ hosts_file_dest }} mode=0644 backup=yes

- name: stat host_vars_src directory
  stat: path="{{ host_vars_src }}"
  register: reg_host_vars_src
  delegate_to: localhost

- name: synchronize group_vars/ to /var/www/html/group_vars/ - for ansible-pull - secrets and firewalls are not needed
  synchronize:
                src: "{{ group_vars_src }}"
                dest: "{{ group_vars_dest }}"
                archive: no
                recursive: yes
                times: no
                set_remote_user: yes
                perms: no
                owner: no
                group: no
                rsync_opts:
                 - '--exclude=secrets.yml'
                 - '--exclude=trusted_networks.yml'
                 - '--exclude=*.swp'
  when: ansible_virtualization_type != "docker"

- name: synchronize host_vars for ansible-pull if the directory exsts
  synchronize: 
                src: "{{ host_vars_src }}" 
                dest: "{{ host_vars_dest }}" 
                owner: no 
                group: no
  when: ansible_virtualization_type != "docker" and reg_host_vars_src.stat.exists

- name: template the ansible-pull-script.sh to /var/www/html - for ansible-pull
  template: src=ansible-pull-script.sh.j2 dest=/var/www/html/ansible-pull-script.sh mode=0644 backup=yes
  when: ansible_virtualization_type != "docker"

- name: copy in reinstall script
  copy: src=reinstall dest=/usr/local/sbin/reinstall mode=0755 owner=root group=root backup=no

- name: Copy requirements.yml
  copy: src={{ playbook_dir }}/requirements.yml dest=/tmp/requirements.yml

- name: Copy gitmirror config generation tool
  copy: src={{ playbook_dir }}/tools/gitmirror_conf_generate.py dest=/tmp/gitmirror_conf_generate.py

- name: Make sure PyYAML is installed
  yum: name=PyYAML

- name: Run gitmirror config generation tool
  command: python /tmp/gitmirror_conf_generate.py /tmp/requirements.yml {{ pull_install_ip }} /var/www/html/requirements_mirror.yml {{ gitmirror_config }} {{ gitmirror_basepath }}

- name: Bounce gitmirror service, but do not fail if it does not exist yet
  service: name=gitmirror state=restarted
  ignore_errors: yes
